# -*- coding: utf-8 -*-
"""
–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –¥–ª—è Telegram (PTB 20.7)
- 10 –∫–∞—Ç–µ–≥–æ—Ä–∏–π (–∫–Ω–æ–ø–∫–∏ –≤ 2 —Å—Ç–æ–ª–±—Ü–∞)
- 3 —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: –ª—ë–≥–∫–∏–π/—Å—Ä–µ–¥–Ω–∏–π/—Å–ª–æ–∂–Ω—ã–π
- –¢–∞–π–º–µ—Ä 30 —Å–µ–∫—É–Ω–¥ —Å –ø–æ—Å–µ–∫—É–Ω–¥–Ω—ã–º –æ–±—Ä–∞—Ç–Ω—ã–º –æ—Ç—Å—á—ë—Ç–æ–º (–æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ –∂–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
- –ü–æ–¥—Å–∫–∞–∑–∫–∞: —É–±–∏—Ä–∞–µ—Ç 2 –Ω–µ–≤–µ—Ä–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–∞ –∏ -10 –æ—á–∫–æ–≤ (1 —Ä–∞–∑ –Ω–∞ –≤–æ–ø—Ä–æ—Å)
- –û—á–∫–∏: 5/10/15 –∑–∞ –ª—ë–≥–∫–∏–π/—Å—Ä–µ–¥–Ω–∏–π/—Å–ª–æ–∂–Ω—ã–π
- –ö–æ–º–±–æ: –∫–∞–∂–¥—ã–µ 3 –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ø–æ–¥—Ä—è–¥ +5 –æ—á–∫–æ–≤
- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ Postgres (–æ—á–∫–∏, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã, —Å–µ—Ä–∏–π–Ω–æ—Å—Ç—å)
- –ë–µ–∑ —Å–ø–∞–º–∞: –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –≤—Å—ë –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ edit_message_text / edit_reply_markup
- –¢—Ä–µ–±—É–µ—Ç env: BOT_TOKEN, DATABASE_URL
"""

import asyncio
import json
import os
import random
import hashlib
from pathlib import Path
from typing import Dict, List, Tuple, Optional

import asyncpg
from telegram import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Update,
)
from telegram.ext import (
    Application,
    CallbackQueryHandler,
    CommandHandler,
    ContextTypes,
)

# ---------- –ö–æ–Ω—Ñ–∏–≥ / —Ñ–∞–π–ª—ã ----------
QUESTIONS_FILE = Path("questions.json")  # –ª–µ–∂–∏—Ç —Ä—è–¥–æ–º —Å bot.py –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
BOT_TOKEN = os.getenv("BOT_TOKEN")
DATABASE_URL = os.getenv("DATABASE_URL")

if not BOT_TOKEN:
    raise RuntimeError("Environment variable BOT_TOKEN is not set")
if not DATABASE_URL:
    raise RuntimeError("Environment variable DATABASE_URL is not set")

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: (—Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏, slug, —Ä—É—Å—Å–∫–æ–µ –∏–º—è –≤ JSON)
CATEGORIES: List[Tuple[str, str, str]] = [
    ("–ò—Å—Ç–æ—Ä–∏—è üìú", "history", "–ò—Å—Ç–æ—Ä–∏—è"),
    ("–ì–µ–æ–≥—Ä–∞—Ñ–∏—è üåç", "geography", "–ì–µ–æ–≥—Ä–∞—Ñ–∏—è"),
    ("–ê—Å—Ç—Ä–æ–Ω–æ–º–∏—è üåå", "astronomy", "–ê—Å—Ç—Ä–æ–Ω–æ–º–∏—è"),
    ("–ë–∏–æ–ª–æ–≥–∏—è üß¨", "biology", "–ë–∏–æ–ª–æ–≥–∏—è"),
    ("–ö–∏–Ω–æ üé¨", "cinema", "–ö–∏–Ω–æ"),
    ("–ú—É–∑—ã–∫–∞ üéµ", "music", "–ú—É–∑—ã–∫–∞"),
    ("–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞ üìö", "literature", "–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞"),
    ("–ù–∞—É–∫–∞ üî¨", "science", "–ù–∞—É–∫–∞"),
    ("–ò—Å–∫—É—Å—Å—Ç–≤–æ üé®", "art", "–ò—Å–∫—É—Å—Å—Ç–≤–æ"),
    ("–¢–µ—Ö–Ω–∏–∫–∞ ‚öôÔ∏è", "technique", "–¢–µ—Ö–Ω–∏–∫–∞"),
]

DIFF_LABEL = {
    "easy": ("–õ—ë–≥–∫–∏–π", 5),
    "medium": ("–°—Ä–µ–¥–Ω–∏–π", 10),
    "hard": ("–°–ª–æ–∂–Ω—ã–π", 15),
}

# ---------- –ó–∞–≥—Ä—É–∑–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ ----------
# –û–∂–∏–¥–∞–µ—Ç—Å—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞:
# { "questions": [ { "difficulty": "easy|medium|hard", "question": "‚Ä¶",
#                    "options": ["‚Ä¶","‚Ä¶","‚Ä¶","‚Ä¶"], "answer": "‚Ä¶",
#                    "category": "–ò—Å–∫—É—Å—Å—Ç–≤–æ" }, ... ] }
with open(QUESTIONS_FILE, "r", encoding="utf-8") as f:
    RAW = json.load(f)

# –ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º: (slug, diff) -> —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤
QUESTIONS: Dict[Tuple[str, str], List[dict]] = {}
rus_to_slug = {rus: slug for _, slug, rus in CATEGORIES}

for q in RAW.get("questions", []):
    rus_cat = q.get("category", "").strip()
    diff = q.get("difficulty", "").strip().lower()
    slug = rus_to_slug.get(rus_cat)
    if slug and diff in DIFF_LABEL and isinstance(q.get("options"), list) and q.get("answer"):
        QUESTIONS.setdefault((slug, diff), []).append(q)

# ---------- –†–∞–±–æ—Ç–∞ —Å –ë–î ----------
async def db() -> asyncpg.Pool:
    # —Å–æ–∑–¥–∞—ë–º –ø—É–ª –æ–¥–∏–Ω —Ä–∞–∑ –∏ –∫–µ—à–∏—Ä—É–µ–º –Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
    if not getattr(db, "_pool", None):
        db._pool = await asyncpg.create_pool(DATABASE_URL, min_size=1, max_size=5)
    return db._pool  # type: ignore[attr-defined]


async def init_db():
    pool = await db()
    async with pool.acquire() as conn:
        await conn.execute("""
        CREATE TABLE IF NOT EXISTS users (
            user_id BIGINT PRIMARY KEY,
            score INTEGER NOT NULL DEFAULT 0,
            streak INTEGER NOT NULL DEFAULT 0
        );
        """)
        await conn.execute("""
        CREATE TABLE IF NOT EXISTS used_questions (
            user_id BIGINT NOT NULL,
            qhash TEXT NOT NULL,
            PRIMARY KEY (user_id, qhash)
        );
        """)
        await conn.execute("""
        CREATE TABLE IF NOT EXISTS sessions (
            user_id BIGINT PRIMARY KEY,
            category TEXT,
            difficulty TEXT,
            message_chat BIGINT,
            message_id BIGINT
        );
        """)

async def get_user_row(user_id: int) -> Tuple[int, int]:
    pool = await db()
    async with pool.acquire() as conn:
        row = await conn.fetchrow("SELECT score, streak FROM users WHERE user_id=$1", user_id)
        if row:
            return row["score"], row["streak"]
        await conn.execute("INSERT INTO users(user_id) VALUES($1) ON CONFLICT DO NOTHING", user_id)
        return 0, 0

async def set_score_and_streak(user_id: int, score: int, streak: int):
    pool = await db()
    async with pool.acquire() as conn:
        await conn.execute(
            "INSERT INTO users(user_id, score, streak) VALUES($1,$2,$3) "
            "ON CONFLICT (user_id) DO UPDATE SET score=EXCLUDED.score, streak=EXCLUDED.streak",
            user_id, score, streak
        )

async def mark_used(user_id: int, qhash: str):
    pool = await db()
    async with pool.acquire() as conn:
        await conn.execute(
            "INSERT INTO used_questions(user_id, qhash) VALUES($1,$2) ON CONFLICT DO NOTHING",
            user_id, qhash
        )

async def is_used(user_id: int, qhash: str) -> bool:
    pool = await db()
    async with pool.acquire() as conn:
        return await conn.fetchval(
            "SELECT EXISTS(SELECT 1 FROM used_questions WHERE user_id=$1 AND qhash=$2)",
            user_id, qhash
        )

async def save_session(user_id: int, category: Optional[str], difficulty: Optional[str],
                       chat_id: Optional[int], message_id: Optional[int]):
    pool = await db()
    async with pool.acquire() as conn:
        await conn.execute(
            "INSERT INTO sessions(user_id, category, difficulty, message_chat, message_id) "
            "VALUES($1,$2,$3,$4,$5) "
            "ON CONFLICT (user_id) DO UPDATE SET category=EXCLUDED.category, "
            "difficulty=EXCLUDED.difficulty, message_chat=EXCLUDED.message_chat, "
            "message_id=EXCLUDED.message_id",
            user_id, category, difficulty, chat_id, message_id
        )

async def clear_session_message(user_id: int):
    pool = await db()
    async with pool.acquire() as conn:
        await conn.execute(
            "UPDATE sessions SET message_chat=NULL, message_id=NULL WHERE user_id=$1",
            user_id
        )

# ---------- –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –ø–∞–º—è—Ç–∏ ----------
# —Ç—É—Ç —Ö—Ä–∞–Ω–∏–º –∞–∫—Ç–∏–≤–Ω—ã–π –≤–æ–ø—Ä–æ—Å, –ø–æ—Ä—è–¥–æ–∫ –æ–ø—Ü–∏–π, –∑–∞–¥–∞—á–∞ —Ç–∞–π–º–µ—Ä–∞, —Ñ–ª–∞–≥ –ø–æ–¥—Å–∫–∞–∑–∫–∏
class RoundState:
    def __init__(self, category: str, difficulty: str, q: dict,
                 options_order: List[str], correct: str,
                 chat_id: int, message_id: int):
        self.category = category
        self.difficulty = difficulty
        self.question = q
        self.options_order = options_order[:]  # —Ñ–∏–∫—Å–∏—Ä—É–µ–º, —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∏ "–Ω–µ –ø—Ä—ã–≥–∞–ª–∏"
        self.correct = correct
        self.chat_id = chat_id
        self.message_id = message_id
        self.hint_used = False
        self.timer_task: Optional[asyncio.Task] = None
        self.time_left = 30

STATE: Dict[int, RoundState] = {}  # user_id -> RoundState

# ---------- –£—Ç–∏–ª–∏—Ç—ã ----------
def qhash(q: dict) -> str:
    base = f"{q.get('category','')}|{q.get('difficulty','')}|{q.get('question','')}"
    return hashlib.sha1(base.encode("utf-8")).hexdigest()

def build_menu_keyboard(score: int) -> InlineKeyboardMarkup:
    # 2 —Å—Ç–æ–ª–±—Ü–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    btns: List[List[InlineKeyboardButton]] = []
    row: List[InlineKeyboardButton] = []
    for text, slug, _ in CATEGORIES:
        row.append(InlineKeyboardButton(text, callback_data=f"cat|{slug}"))
        if len(row) == 2:
            btns.append(row)
            row = []
    if row:
        btns.append(row)
    # –°–ª—É–∂–µ–±–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
    btns.append([InlineKeyboardButton("‚ÑπÔ∏è –ü—Ä–∞–≤–∏–ª–∞/–û—á–∫–∏", callback_data="info")])
    return InlineKeyboardMarkup(btns)

def build_diff_keyboard(cat_slug: str) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("üü¢ –õ—ë–≥–∫–∏–π", callback_data=f"diff|{cat_slug}|easy"),
            InlineKeyboardButton("üü° –°—Ä–µ–¥–Ω–∏–π", callback_data=f"diff|{cat_slug}|medium"),
            InlineKeyboardButton("üî¥ –°–ª–æ–∂–Ω—ã–π", callback_data=f"diff|{cat_slug}|hard"),
        ],
        [InlineKeyboardButton("üè† –í –º–µ–Ω—é", callback_data="menu")]
    ])

def build_question_keyboard(opts: List[str], enable_hint: bool) -> InlineKeyboardMarkup:
    rows: List[List[InlineKeyboardButton]] = []
    # 2 –Ω–∞ —Å—Ç—Ä–æ–∫—É
    for i in range(0, len(opts), 2):
        pair = [InlineKeyboardButton(opts[i], callback_data=f"ans|{opts[i]}")]
        if i + 1 < len(opts):
            pair.append(InlineKeyboardButton(opts[i+1], callback_data=f"ans|{opts[i+1]}"))
        rows.append(pair)
    service: List[InlineKeyboardButton] = []
    if enable_hint:
        service.append(InlineKeyboardButton("ü™Ñ –ü–æ–¥—Å–∫–∞–∑–∫–∞ (‚àí10)", callback_data="hint"))
    service.append(InlineKeyboardButton("üè† –í –º–µ–Ω—é", callback_data="menu"))
    rows.append(service)
    return InlineKeyboardMarkup(rows)

def score_for_diff(diff: str) -> int:
    return DIFF_LABEL[diff][1]

def rus_cat_by_slug(slug: str) -> str:
    for text, s, rus in CATEGORIES:
        if s == slug:
            return rus
    return slug

# ---------- –¢–∞–π–º–µ—Ä ----------
async def run_timer(user_id: int, app: Application):
    st = STATE.get(user_id)
    if not st:
        return
    try:
        while st.time_left > 0:
            await asyncio.sleep(1)
            st.time_left -= 1
            # –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤–æ–ø—Ä–æ—Å–∞ (–±–µ–∑ –ø–µ—Ä–µ—Ç–∞—Å–æ–≤–∫–∏ –∫–Ω–æ–ø–æ–∫)
            header = f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: {st.time_left:02d} c\n\n"
            cat = rus_cat_by_slug(st.category)
            diff_title = DIFF_LABEL[st.difficulty][0]
            text = f"{header}–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {cat} ¬∑ –°–ª–æ–∂–Ω–æ—Å—Ç—å: {diff_title}\n\n‚ùì {st.question['question']}"
            try:
                await app.bot.edit_message_text(
                    chat_id=st.chat_id,
                    message_id=st.message_id,
                    text=text,
                )
                await app.bot.edit_message_reply_markup(
                    chat_id=st.chat_id,
                    message_id=st.message_id,
                    reply_markup=build_question_keyboard(st.options_order, not st.hint_used),
                )
            except Exception:
                # –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ä–µ–¥–∫–∏–µ –æ—à–∏–±–∫–∏ Too Many Requests / message not modified
                pass

        # –≤—Ä–µ–º—è –≤—ã—à–ª–æ ‚Äî —Å—á–∏—Ç–∞–µ–º –∫–∞–∫ –Ω–µ–≤–µ—Ä–Ω–æ
        await handle_answer_result(user_id, correct=False, app=app, reason="‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ")
    finally:
        # –ø—Ä–∏ –ª—é–±–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ ‚Äî —Å–±—Ä–æ—Å —Ç–∞–π–º–µ—Ä–∞
        st2 = STATE.get(user_id)
        if st2:
            st2.timer_task = None

# ---------- –í—ã–¥–∞—á–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ ----------
async def next_question(update: Update, context: ContextTypes.DEFAULT_TYPE,
                        cat_slug: str, diff: str, reuse_message: Optional[Tuple[int, int]] = None):
    user_id = update.effective_user.id
    pool = await db()

    # –ø–æ–¥–±–∏—Ä–∞–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å
    candidates = QUESTIONS.get((cat_slug, diff), [])[:]
    random.shuffle(candidates)

    chosen: Optional[dict] = None
    for q in candidates:
        if not await is_used(user_id, qhash(q)):
            chosen = q
            break

    if not chosen:
        # –≤–æ–ø—Ä–æ—Å—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å
        score, _ = await get_user_row(user_id)
        txt = (
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {rus_cat_by_slug(cat_slug)} ¬∑ {DIFF_LABEL[diff][0]}\n\n"
            "üõë –í–æ–ø—Ä–æ—Å—ã –≤ —ç—Ç–æ–π –ø–æ–¥–±–æ—Ä–∫–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å!\n\n"
            f"–¢–µ–∫—É—â–∏–π —Å—á—ë—Ç: {score} –æ—á–∫–æ–≤"
        )
        if reuse_message:
            chat_id, msg_id = reuse_message
            await context.bot.edit_message_text(chat_id=chat_id, message_id=msg_id, text=txt,
                                                reply_markup=build_menu_keyboard(score))
            await clear_session_message(user_id)
        else:
            await update.effective_message.reply_text(txt, reply_markup=build_menu_keyboard(score))
        STATE.pop(user_id, None)
        return

    # —Ñ–∏–∫—Å–∏—Ä—É–µ–º –ø–æ—Ä—è–¥–æ–∫ –æ–ø—Ü–∏–π –æ–¥–∏–Ω —Ä–∞–∑, —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∏ "–Ω–µ –ø—Ä—ã–≥–∞–ª–∏"
    options = chosen["options"][:]
    random.shuffle(options)
    correct = chosen["answer"]

    header = f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: 30 c\n\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {rus_cat_by_slug(cat_slug)} ¬∑ {DIFF_LABEL[diff][0]}\n\n"
    text = header + f"‚ùì {chosen['question']}"

    if reuse_message:
        chat_id, msg_id = reuse_message
        await context.bot.edit_message_text(chat_id=chat_id, message_id=msg_id, text=text)
        await context.bot.edit_message_reply_markup(
            chat_id=chat_id,
            message_id=msg_id,
            reply_markup=build_question_keyboard(options, True),
        )
        message_chat, message_id = chat_id, msg_id
    else:
        sent = await update.effective_message.reply_text(
            text, reply_markup=build_question_keyboard(options, True)
        )
        message_chat, message_id = sent.chat_id, sent.message_id

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—É–Ω–¥–∞ –≤ –ø–∞–º—è—Ç–∏
    st = RoundState(cat_slug, diff, chosen, options, correct, message_chat, message_id)
    STATE[user_id] = st

    # –ø–æ–º–µ—á–∞–µ–º —Å–µ—Å—Å–∏—é –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
    await save_session(user_id, cat_slug, diff, message_chat, message_id)
    st.timer_task = asyncio.create_task(run_timer(user_id, context.application))

# ---------- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ----------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    score, _ = await get_user_row(user.id)
    welcome = (
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n\n"
        "–≠—Ç–æ –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ –ø–æ 10 –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º. –í—ã–±–∏—Ä–∞–π –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ —Å–ª–æ–∂–Ω–æ—Å—Ç—å.\n"
        "‚è≥ –ù–∞ –æ—Ç–≤–µ—Ç 30 —Å–µ–∫—É–Ω–¥. –ü–æ–¥—Å–∫–∞–∑–∫–∞ —É–±–∏—Ä–∞–µ—Ç 2 –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–∞ –∏ —Å—Ç–æ–∏—Ç 10 –æ—á–∫–æ–≤.\n"
        "–û—á–∫–∏: 5/10/15 –∑–∞ –ª—ë–≥–∫–∏–π/—Å—Ä–µ–¥–Ω–∏–π/—Å–ª–æ–∂–Ω—ã–π. –ö–∞–∂–¥—ã–µ 3 –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ø–æ–¥—Ä—è–¥ ‚Äî –±–æ–Ω—É—Å +5 –æ—á–∫–æ–≤.\n\n"
        f"–¢–µ–∫—É—â–∏–π —Å—á—ë—Ç: {score} –æ—á–∫–æ–≤"
    )
    await update.message.reply_text(welcome, reply_markup=build_menu_keyboard(score))


async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    score, _ = await get_user_row(user_id)

    # –æ—Ç–º–µ–Ω—è–µ–º —Ç–∞–π–º–µ—Ä –∏ —Å—Ç–∏—Ä–∞–µ–º –ø—Ä–∏–≤—è–∑–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è
    st = STATE.pop(user_id, None)
    if st and st.timer_task and not st.timer_task.done():
        st.timer_task.cancel()
    await clear_session_message(user_id)

    await update.callback_query.answer()
    await update.callback_query.edit_message_text(
        f"üè† –ú–µ–Ω—é\n–¢–µ–∫—É—â–∏–π —Å—á—ë—Ç: {score} –æ—á–∫–æ–≤",
        reply_markup=build_menu_keyboard(score)
    )


async def info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    score, streak = await get_user_row(user_id)
    text = (
        "‚ÑπÔ∏è –ü—Ä–∞–≤–∏–ª–∞ –∏ –æ—á–∫–∏\n\n"
        "‚Ä¢ 30 —Å–µ–∫—É–Ω–¥ –Ω–∞ –æ—Ç–≤–µ—Ç, —Ç–∞–π–º–µ—Ä —Ç–∏–∫–∞–µ—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏.\n"
        "‚Ä¢ –ü–æ–¥—Å–∫–∞–∑–∫–∞ —É–±–∏—Ä–∞–µ—Ç 2 –Ω–µ–≤–µ—Ä–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–∞ –∏ —Å—Ç–æ–∏—Ç 10 –æ—á–∫–æ–≤.\n"
        "‚Ä¢ –û—á–∫–∏ –∑–∞ –æ—Ç–≤–µ—Ç: –õ—ë–≥–∫–∏–π 5 ¬∑ –°—Ä–µ–¥–Ω–∏–π 10 ¬∑ –°–ª–æ–∂–Ω—ã–π 15.\n"
        "‚Ä¢ –ö–æ–º–±–æ: –∫–∞–∂–¥—ã–µ 3 –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ø–æ–¥—Ä—è–¥ ‚Äî +5 –æ—á–∫–æ–≤.\n\n"
        f"–°–µ–π—á–∞—Å: {score} –æ—á–∫–æ–≤ ¬∑ –°–µ—Ä–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö: {streak}"
    )
    await update.callback_query.answer()
    await update.callback_query.edit_message_text(text, reply_markup=build_menu_keyboard(score))


async def category_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    _, slug = update.callback_query.data.split("|", 1)
    await update.callback_query.edit_message_text(
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {rus_cat_by_slug(slug)}\n–í—ã–±–µ—Ä–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç—å:",
        reply_markup=build_diff_keyboard(slug)
    )


async def difficulty_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    _, slug, diff = update.callback_query.data.split("|", 2)
    # –Ω–∞—á–∏–Ω–∞–µ–º —Ä–∞—É–Ω–¥, –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É—è —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    chat_id = update.effective_message.chat_id
    msg_id = update.effective_message.message_id
    await next_question(update, context, slug, diff, reuse_message=(chat_id, msg_id))


async def hint(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    st = STATE.get(user_id)
    if not st:
        await update.callback_query.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞", show_alert=True)
        return

    if st.hint_used:
        await update.callback_query.answer("–ü–æ–¥—Å–∫–∞–∑–∫–∞ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞", show_alert=True)
        return

    # —Å–ø–∏—Å—ã–≤–∞–µ–º 10 –æ—á–∫–æ–≤
    score, streak = await get_user_row(user_id)
    score = score - 10
    await set_score_and_streak(user_id, score, streak)

    # —Å–∫—Ä—ã–≤–∞–µ–º –¥–≤–µ –Ω–µ–≤–µ—Ä–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ (–æ—Å—Ç–∞–≤–ª—è–µ–º 2 –≤–∞—Ä–∏–∞–Ω—Ç–∞: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π + –æ–¥–∏–Ω —Å–ª—É—á–∞–π–Ω—ã–π –Ω–µ–≤–µ—Ä–Ω—ã–π)
    incorrect = [o for o in st.options_order if o != st.correct]
    keep_wrong = random.choice(incorrect)
    new_opts = [st.correct, keep_wrong]
    random.shuffle(new_opts)
    st.options_order = new_opts
    st.hint_used = True

    await update.callback_query.answer("–ü–æ–¥—Å–∫–∞–∑–∫–∞: ‚àí10 –æ—á–∫–æ–≤")
    header = f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: {st.time_left:02d} c\n\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {rus_cat_by_slug(st.category)} ¬∑ {DIFF_LABEL[st.difficulty][0]}\n\n"
    text = header + f"‚ùì {st.question['question']}\n\n(–ü–æ–¥—Å–∫–∞–∑–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞)"
    try:
        await update.callback_query.edit_message_text(text)
        await update.callback_query.edit_message_reply_markup(
            build_question_keyboard(st.options_order, enable_hint=False)
        )
    except Exception:
        pass  # –Ω–∞ —Å–ª—É—á–∞–π rate limit


async def answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    user_id = update.effective_user.id
    st = STATE.get(user_id)
    if not st:
        # –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ ‚Äî –ø—Ä–æ—Å—Ç–æ –≤ –º–µ–Ω—é
        score, _ = await get_user_row(user_id)
        await update.callback_query.edit_message_text(
            f"–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.\n–°—á—ë—Ç: {score} –æ—á–∫–æ–≤",
            reply_markup=build_menu_keyboard(score)
        )
        return

    chosen = update.callback_query.data.split("|", 1)[1]
    correct = (chosen == st.correct)

    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
    if st.timer_task and not st.timer_task.done():
        st.timer_task.cancel()
        st.timer_task = None

    await handle_answer_result(user_id, correct, context.application, chosen=chosen)


async def handle_answer_result(user_id: int, correct: bool, app: Application,
                               chosen: Optional[str] = None, reason: Optional[str] = None):
    """–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –æ—á–∫–æ–≤/–∫–æ–º–±–æ, –æ—Ç–º–µ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–º, –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É."""
    st = STATE.get(user_id)
    if not st:
        return

    # –æ—Ç–º–µ—Ç–∏—Ç—å –≤–æ–ø—Ä–æ—Å –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π
    await mark_used(user_id, qhash(st.question))

    # –æ—á–∫–∏/—Å–µ—Ä–∏–π–Ω–æ—Å—Ç—å
    score, streak = await get_user_row(user_id)
    add = 0
    bonus_text = ""

    if correct:
        add = score_for_diff(st.difficulty)
        streak += 1
        # –±–æ–Ω—É—Å –∑–∞ –∫–∞–∂–¥—ã–µ 3 –ø–æ–¥—Ä—è–¥
        if streak % 3 == 0:
            add += 5
            bonus_text = " (+5 –∫–æ–º–±–æ)"
    else:
        streak = 0

    score += add
    await set_score_and_streak(user_id, score, streak)

    # —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º (–æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ –∂–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
    prefix = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!" if correct else ("‚ùå –ù–µ–≤–µ—Ä–Ω–æ." if not reason else reason + " ‚Äî –æ—Ç–≤–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π.")
    gained = f" +{add} –æ—á–∫–æ–≤" if add > 0 else ""
    answer_line = ""
    if not correct:
        answer_line = f"\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {st.correct}"

    txt = (
        f"{prefix}{gained}{bonus_text}\n"
        f"–°—á—ë—Ç: {score} ¬∑ –°–µ—Ä–∏—è: {streak}{answer_line}\n\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {rus_cat_by_slug(st.category)} ¬∑ {DIFF_LABEL[st.difficulty][0]}"
    )

    try:
        await app.bot.edit_message_text(
            chat_id=st.chat_id,
            message_id=st.message_id,
            text=txt
        )
        await app.bot.edit_message_reply_markup(
            chat_id=st.chat_id,
            message_id=st.message_id,
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚è≠Ô∏è –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å", callback_data=f"next|{st.category}|{st.difficulty}")],
                                               [InlineKeyboardButton("üè† –í –º–µ–Ω—é", callback_data="menu")]])
        )
    except Exception:
        pass

    # –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞, –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é/—Å–ª–æ–∂–Ω–æ—Å—Ç—å –≤ —Å–µ—Å—Å–∏–∏
    await save_session(user_id, st.category, st.difficulty, st.chat_id, st.message_id)
    STATE.pop(user_id, None)


async def next_same(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–Ω–æ–ø–∫–∞ '–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å' –≤ —Ç–æ–π –∂–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏/—Å–ª–æ–∂–Ω–æ—Å—Ç–∏."""
    await update.callback_query.answer()
    _, cat_slug, diff = update.callback_query.data.split("|", 2)
    chat_id = update.effective_message.chat_id
    msg_id = update.effective_message.message_id
    await next_question(update, context, cat_slug, diff, reuse_message=(chat_id, msg_id))


# ---------- main ----------
def main():
    app = Application.builder().token(BOT_TOKEN).build()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î –ø–µ—Ä–µ–¥ —Å—Ç–∞—Ä—Ç–æ–º
    loop = asyncio.get_event_loop()
    loop.run_until_complete(init_db())

    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))

    # –ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é/–∏–Ω—Ñ–æ
    app.add_handler(CallbackQueryHandler(menu, pattern=r"^menu$"))
    app.add_handler(CallbackQueryHandler(info, pattern=r"^info$"))

    # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ -> —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    app.add_handler(CallbackQueryHandler(category_chosen, pattern=r"^cat\|"))
    app.add_handler(CallbackQueryHandler(difficulty_chosen, pattern=r"^diff\|"))

    # –í–æ–ø—Ä–æ—Å—ã: –ø–æ–¥—Å–∫–∞–∑–∫–∞/–æ—Ç–≤–µ—Ç/—Å–ª–µ–¥—É—é—â–∏–π
    app.add_handler(CallbackQueryHandler(hint, pattern=r"^hint$"))
    app.add_handler(CallbackQueryHandler(answer, pattern=r"^ans\|"))
    app.add_handler(CallbackQueryHandler(next_same, pattern=r"^next\|"))

    app.run_polling(allowed_updates=["message", "callback_query"])


if __name__ == "__main__":
    main()

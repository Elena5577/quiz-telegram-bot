import os
import logging
import random
import asyncio
import asyncpg
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Application, ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes

logging.basicConfig(level=logging.INFO)
log = logging.getLogger(__name__)

DB_POOL = None
QUESTIONS = {}

# =================== DB ===================
async def init_db():
    global DB_POOL
    DB_POOL = await asyncpg.create_pool(os.getenv("DATABASE_URL"))
    async with DB_POOL.acquire() as conn:
        await conn.execute("""
            CREATE TABLE IF NOT EXISTS users (
                user_id BIGINT PRIMARY KEY,
                score INT DEFAULT 0,
                combo INT DEFAULT 0,
                correct INT DEFAULT 0,
                wrong INT DEFAULT 0,
                hints INT DEFAULT 5
            )
        """)

async def get_user(user_id: int):
    async with DB_POOL.acquire() as conn:
        row = await conn.fetchrow("SELECT * FROM users WHERE user_id=$1", user_id)
        if not row:
            await conn.execute("INSERT INTO users(user_id) VALUES($1)", user_id)
            row = await conn.fetchrow("SELECT * FROM users WHERE user_id=$1", user_id)
        return dict(row)

async def update_user(user_id: int, **fields):
    async with DB_POOL.acquire() as conn:
        sets = ", ".join([f"{k}=${i+2}" for i, k in enumerate(fields.keys())])
        values = list(fields.values())
        await conn.execute(f"UPDATE users SET {sets} WHERE user_id=$1", user_id, *values)

# =================== QUESTIONS ===================
def load_questions():
    global QUESTIONS
    QUESTIONS = {
        "–õ—ë–≥–∫–∏–µ": [
            ("–°—Ç–æ–ª–∏—Ü–∞ –§—Ä–∞–Ω—Ü–∏–∏?", ["–ü–∞—Ä–∏–∂", "–ë–µ—Ä–ª–∏–Ω", "–†–∏–º", "–ú–∞–¥—Ä–∏–¥"], "–ü–∞—Ä–∏–∂"),
            ("2+2?", ["3", "4", "5", "6"], "4"),
        ],
        "–°—Ä–µ–¥–Ω–∏–µ": [
            ("–ö—Ç–æ –Ω–∞–ø–∏—Å–∞–ª '–ï–≤–≥–µ–Ω–∏—è –û–Ω–µ–≥–∏–Ω–∞'?", ["–¢–æ–ª—Å—Ç–æ–π", "–ü—É—à–∫–∏–Ω", "–ì–æ–≥–æ–ª—å", "–õ–µ—Ä–º–æ–Ω—Ç–æ–≤"], "–ü—É—à–∫–∏–Ω"),
        ],
        "–°–ª–æ–∂–Ω—ã–µ": [
            ("–ì–æ–¥ –æ—Å–Ω–æ–≤–∞–Ω–∏—è –†–∏–º–∞?", ["753 –¥–æ –Ω.—ç.", "476 –Ω.—ç.", "100 –¥–æ –Ω.—ç.", "1200 –Ω.—ç."], "753 –¥–æ –Ω.—ç."),
        ],
    }

# =================== GAME ===================
async def send_stats_message(query, user, text):
    stats = (
        f"{text}\n"
        f"üèÜ –°—á—ë—Ç: {user['score']}\n"
        f"üî• –ö–æ–º–±–æ: {user['combo']}\n"
        f"‚úîÔ∏è –í–µ—Ä–Ω—ã—Ö: {user['correct']} ‚ùå –û—à–∏–±–æ–∫: {user['wrong']}\n"
        f"üí° –ü–æ–¥—Å–∫–∞–∑–æ–∫: {user['hints']}"
    )
    try:
        await query.edit_message_text(stats, reply_markup=query.message.reply_markup)
    except:
        await query.message.reply_text(stats, reply_markup=query.message.reply_markup)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton("üéØ –ò–≥—Ä–∞—Ç—å", callback_data="menu_categories")]]
    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É!", reply_markup=InlineKeyboardMarkup(keyboard))

async def menu_categories(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    keyboard = [[InlineKeyboardButton("üìö –õ—ë–≥–∫–∏–µ", callback_data="cat:–õ—ë–≥–∫–∏–µ")],
                [InlineKeyboardButton("üß© –°—Ä–µ–¥–Ω–∏–µ", callback_data="cat:–°—Ä–µ–¥–Ω–∏–µ")],
                [InlineKeyboardButton("üß† –°–ª–æ–∂–Ω—ã–µ", callback_data="cat:–°–ª–æ–∂–Ω—ã–µ")]]
    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=InlineKeyboardMarkup(keyboard))

async def choose_difficulty(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    category = query.data.split(":")[1]
    context.user_data["category"] = category
    await query.answer()
    keyboard = [[InlineKeyboardButton("‚≠ê –õ—ë–≥–∫–∏–π", callback_data="diff:5")],
                [InlineKeyboardButton("‚≠ê‚≠ê –°—Ä–µ–¥–Ω–∏–π", callback_data="diff:10")],
                [InlineKeyboardButton("‚≠ê‚≠ê‚≠ê –°–ª–æ–∂–Ω—ã–π", callback_data="diff:15")]]
    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–∂–Ω–æ—Å—Ç—å:", reply_markup=InlineKeyboardMarkup(keyboard))

async def send_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    diff = int(query.data.split(":")[1])
    context.user_data["difficulty"] = diff
    category = context.user_data["category"]
    question, options, answer = random.choice(QUESTIONS[category])
    context.user_data["answer"] = answer
    buttons = [[InlineKeyboardButton(opt, callback_data=f"ans:{opt}")] for opt in options]
    await query.edit_message_text(question, reply_markup=InlineKeyboardMarkup(buttons))

async def handle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    choice = query.data.split(":")[1]
    user = await get_user(query.from_user.id)
    answer = context.user_data.get("answer")
    diff = context.user_data.get("difficulty", 5)

    if choice == answer:
        user["score"] += diff
        user["combo"] += 1
        user["correct"] += 1
        text = f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! +{diff}"
        if user["combo"] % 3 == 0:
            user["score"] += 5
            user["hints"] += 1
            text += "\nüî• –ö–æ–º–±–æ! +5 –±–∞–ª–ª–æ–≤, +1 –ø–æ–¥—Å–∫–∞–∑–∫–∞"
    else:
        user["wrong"] += 1
        user["combo"] = 0
        text = f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –í–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç: {answer}"

    await update_user(query.from_user.id, **user)
    await send_stats_message(query, user, text)

    # —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
    category = context.user_data["category"]
    question, options, answer = random.choice(QUESTIONS[category])
    context.user_data["answer"] = answer
    buttons = [[InlineKeyboardButton(opt, callback_data=f"ans:{opt}")] for opt in options]
    await query.message.reply_text(question, reply_markup=InlineKeyboardMarkup(buttons))

# =================== BUILD ===================
def build_app(bot_token: str) -> Application:
    app = ApplicationBuilder().token(bot_token).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(menu_categories, pattern="^menu_categories$"))
    app.add_handler(CallbackQueryHandler(choose_difficulty, pattern="^cat:"))
    app.add_handler(CallbackQueryHandler(send_question, pattern="^diff:"))
    app.add_handler(CallbackQueryHandler(handle_answer, pattern="^ans:"))
    return app


async def main():
    bot_token = os.getenv("BOT_TOKEN")
    db_url = os.getenv("DATABASE_URL")

    print("=== DEBUG STARTUP ===")
    print("BOT_TOKEN:", bot_token[:10] if bot_token else "‚ùå not found")
    print("DATABASE_URL:", db_url[:30] if db_url else "‚ùå not found")
    print("=====================")

    if not bot_token:
        raise RuntimeError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω")

    load_questions()
    await init_db()
    app = build_app(bot_token)
    log.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫
    await app.run_polling(allowed_updates=["message", "callback_query"])


if __name__ == "__main__":
    import asyncio
    asyncio.run(main())

import json
import random
import sqlite3
import asyncio
from telegram import (
    Update,
    InlineKeyboardMarkup,
    InlineKeyboardButton
)
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes
)

# ================== –ù–ê–°–¢–†–û–ô–ö–ò ==================
TOKEN = "8212049255:AAHoqDBpbx_O8cnwzQKZHfYxVJ2TblmT2xw"
DB_PATH = "quiz.db"
QUESTIONS_FILE = "questions.json"

CATEGORIES = [
    ("–ò—Å—Ç–æ—Ä–∏—è üìú", "history"),
    ("–ì–µ–æ–≥—Ä–∞—Ñ–∏—è üåç", "geography"),
    ("–ê—Å—Ç—Ä–æ–Ω–æ–º–∏—è üåå", "astronomy"),
    ("–ë–∏–æ–ª–æ–≥–∏—è üß¨", "biology"),
    ("–ö–∏–Ω–æ üé¨", "cinema"),
    ("–ú—É–∑—ã–∫–∞ üéµ", "music"),
    ("–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞ üìö", "literature"),
    ("–ù–∞—É–∫–∞ üî¨", "science"),
    ("–ò—Å–∫—É—Å—Å—Ç–≤–æ üé®", "art"),
    ("–¢–µ—Ö–Ω–∏–∫–∞ ‚öôÔ∏è", "technique"),
]

DIFFICULTY_POINTS = {"easy": 5, "medium": 10, "hard": 15}
DIFFICULTY_LABELS = {"easy": "–õ—ë–≥–∫–∏–π üôÇ", "medium": "–°—Ä–µ–¥–Ω–∏–π üòê", "hard": "–°–ª–æ–∂–Ω—ã–π üòé"}

# ================== –ó–ê–ì–†–£–ó–ö–ê –í–û–ü–†–û–°–û–í ==================
with open(QUESTIONS_FILE, "r", encoding="utf-8") as f:
    QUESTIONS = json.load(f)["questions"]

# ================== –ë–ê–ó–ê –î–ê–ù–ù–´–• ==================
def init_db():
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("""CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        score INTEGER DEFAULT 0,
        combo INTEGER DEFAULT 0
    )""")
    conn.commit()
    conn.close()

def get_user(user_id):
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("SELECT score, combo FROM users WHERE user_id=?", (user_id,))
    row = c.fetchone()
    if row is None:
        c.execute("INSERT INTO users (user_id, score, combo) VALUES (?, 0, 0)", (user_id,))
        conn.commit()
        row = (0, 0)
    conn.close()
    return {"score": row[0], "combo": row[1]}

def update_user(user_id, score=None, combo=None):
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    if score is not None:
        c.execute("UPDATE users SET score=? WHERE user_id=?", (score, user_id))
    if combo is not None:
        c.execute("UPDATE users SET combo=? WHERE user_id=?", (combo, user_id))
    conn.commit()
    conn.close()

# ================== –•–≠–õ–ü–ï–†–´ ==================
def main_menu(user_id=None):
    score_text = ""
    if user_id:
        user = get_user(user_id)
        score_text = f"\n–¢–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å: {user['score']} –æ—á–∫–æ–≤"

    keyboard = []
    for i in range(0, len(CATEGORIES), 2):
        row = []
        for name, cat in CATEGORIES[i:i+2]:
            row.append(InlineKeyboardButton(name, callback_data=f"cat|{cat}"))
        keyboard.append(row)
    return InlineKeyboardMarkup(keyboard), score_text

def difficulty_menu(category):
    keyboard = [
        [InlineKeyboardButton(DIFFICULTY_LABELS["easy"], callback_data=f"diff|{category}|easy")],
        [InlineKeyboardButton(DIFFICULTY_LABELS["medium"], callback_data=f"diff|{category}|medium")],
        [InlineKeyboardButton(DIFFICULTY_LABELS["hard"], callback_data=f"diff|{category}|hard")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ú–µ–Ω—é", callback_data="menu")]
    ]
    return InlineKeyboardMarkup(keyboard)

def question_keyboard(options, with_hint=True):
    keyboard = [[InlineKeyboardButton(opt, callback_data=f"ans|{opt}")] for opt in options]
    row = []
    if with_hint:
        row.append(InlineKeyboardButton("üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞ (-10)", callback_data="hint"))
    row.append(InlineKeyboardButton("‚¨ÖÔ∏è –ú–µ–Ω—é", callback_data="menu"))
    keyboard.append(row)
    return InlineKeyboardMarkup(keyboard)

# ================== –•–ï–ù–î–õ–ï–†–´ ==================
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard, score_text = main_menu(update.message.from_user.id)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –í–∏–∫—Ç–æ—Ä–∏–Ω—É!\n–í—ã–±–∏—Ä–∞–π –∫–∞—Ç–µ–≥–æ—Ä–∏—é:" + score_text,
        reply_markup=keyboard
    )

async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if "timer_task" in context.user_data:
        context.user_data["timer_task"].cancel()
    query = update.callback_query
    await query.answer()
    keyboard, score_text = main_menu(query.from_user.id)
    await query.edit_message_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–∏—Ä–∞–π –∫–∞—Ç–µ–≥–æ—Ä–∏—é:" + score_text, reply_markup=keyboard)

async def category_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    _, category = query.data.split("|")
    await query.answer()
    await query.edit_message_text(f"–¢—ã –≤—ã–±—Ä–∞–ª –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {category}\n–í—ã–±–µ—Ä–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç—å:", 
                                  reply_markup=difficulty_menu(category))

async def difficulty_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    _, category, difficulty = query.data.split("|")
    await query.answer()

    user_data = context.user_data
    user_data["category"] = category
    user_data["difficulty"] = difficulty
    user_data.setdefault("asked", set())

    await ask_question(update, context)

async def ask_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data = context.user_data
    category = user_data["category"]
    difficulty = user_data["difficulty"]

    available = [q for q in QUESTIONS if q["category"].lower() == category
                 and q["difficulty"] == difficulty
                 and q["question"] not in user_data["asked"]]

    if not available:
        keyboard, score_text = main_menu(update.callback_query.from_user.id)
        await update.callback_query.edit_message_text(
            "–í–æ–ø—Ä–æ—Å—ã –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å üò¢" + score_text,
            reply_markup=keyboard
        )
        return

    question = random.choice(available)
    user_data["current_question"] = question
    user_data["asked"].add(question["question"])

    options = question["options"].copy()
    random.shuffle(options)
    user_data["options"] = options

    if "timer_task" in user_data:
        user_data["timer_task"].cancel()
    user_data["timer_task"] = asyncio.create_task(timer(update, context, 30))

    user = get_user(update.callback_query.from_user.id)
    await update.callback_query.edit_message_text(
        f"‚ùì {question['question']}\n‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: 30 —Å–µ–∫—É–Ω–¥\n–¢–µ–∫—É—â–∏–π —Å—á—ë—Ç: {user['score']}",
        reply_markup=question_keyboard(options)
    )

async def timer(update: Update, context: ContextTypes.DEFAULT_TYPE, seconds: int):
    query = update.callback_query
    for i in range(seconds, 0, -1):
        try:
            await asyncio.sleep(1)
            user = get_user(query.from_user.id)
            await query.edit_message_text(
                f"‚ùì {context.user_data['current_question']['question']}\n‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: {i-1} —Å–µ–∫—É–Ω–¥\n–¢–µ–∫—É—â–∏–π —Å—á—ë—Ç: {user['score']}",
                reply_markup=question_keyboard(context.user_data["options"])
            )
        except:
            return
    keyboard, score_text = main_menu(query.from_user.id)
    await query.edit_message_text("‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ! –û—Ç–≤–µ—Ç –Ω–µ –∑–∞—Å—á–∏—Ç–∞–Ω." + score_text, reply_markup=keyboard)

async def answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    _, ans = query.data.split("|")
    await query.answer()

    user_id = query.from_user.id
    question = context.user_data["current_question"]
    correct = question["answer"]

    context.user_data["timer_task"].cancel()

    user = get_user(user_id)
    score, combo = user["score"], user["combo"]

    if ans == correct:
        points = DIFFICULTY_POINTS[question["difficulty"]]
        combo += 1
        bonus_text = ""
        if combo >= 3:
            points += 5
            bonus_text = " (–ö–æ–º–±–æ! +5)"
            combo = 0
        score += points
        update_user(user_id, score=score, combo=combo)

        await query.edit_message_text(f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! +{points} –æ—á–∫–æ–≤{bonus_text}\n–¢–≤–æ–π —Å—á—ë—Ç: {score}")
        await asyncio.sleep(1)
        await ask_question(update, context)
    else:
        combo = 0
        update_user(user_id, score=score, combo=combo)
        keyboard, score_text = main_menu(user_id)
        await query.edit_message_text(f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct}\n–¢–≤–æ–π —Å—á—ë—Ç: {score}" + score_text,
                                      reply_markup=keyboard)

async def hint(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    user = get_user(user_id)
    if user["score"] < 10:
        keyboard, score_text = main_menu(user_id)
        await query.edit_message_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—á–∫–æ–≤ –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–∫–∏!" + score_text, reply_markup=keyboard)
        return

    update_user(user_id, score=user["score"] - 10)

    question = context.user_data["current_question"]
    options = context.user_data["options"].copy()
    if question["answer"] in options:
        options.remove(question["answer"])
    remove = random.sample(options, min(2, len(options)))
    new_opts = [question["answer"]] + [o for o in options if o not in remove]
    random.shuffle(new_opts)
    context.user_data["options"] = new_opts

    user = get_user(user_id)
    await query.edit_message_text(
        f"‚ùì {question['question']}\nüí° –ü–æ–¥—Å–∫–∞–∑–∫–∞! –û—Å—Ç–∞–ª–æ—Å—å {len(new_opts)} –≤–∞—Ä–∏–∞–Ω—Ç–∞\n–¢–µ–∫—É—â–∏–π —Å—á—ë—Ç: {user['score']}",
        reply_markup=question_keyboard(new_opts, with_hint=False)
    )

async def score(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = get_user(update.message.from_user.id)
    await update.message.reply_text(f"–¢–≤–æ–π —Å—á—ë—Ç: {user['score']}")

# ================== –ó–ê–ü–£–°–ö ==================
def main():
    init_db()
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("score", score))
    app.add_handler(CallbackQueryHandler(category_chosen, pattern=r"^cat\|"))
    app.add_handler(CallbackQueryHandler(difficulty_chosen, pattern=r"^diff\|"))
    app.add_handler(CallbackQueryHandler(answer, pattern=r"^ans\|"))
    app.add_handler(CallbackQueryHandler(hint, pattern=r"^hint$"))
    app.add_handler(CallbackQueryHandler(menu, pattern=r"^menu$"))

    app.run_polling()

if __name__ == "__main__":
    main()

# bot.py
import os
import json
import asyncio
import logging
import random
import hashlib
from typing import Dict, List, Optional, Tuple

import asyncpg
from telegram import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Update,
    Message,
)
from telegram.ext import (
    Application,
    ApplicationBuilder,
    CallbackQueryHandler,
    CommandHandler,
    ContextTypes,
)

# ===================== –õ–û–ì–ò =====================
logging.basicConfig(
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
    level=logging.INFO,
)
log = logging.getLogger("quiz-bot")

# ===================== –ö–û–ù–§–ò–ì =====================
BOT_TOKEN = os.getenv("BOT_TOKEN", "").strip()
DATABASE_URL = os.getenv("DATABASE_URL", "").strip()
QUESTIONS_FILE = os.getenv("QUESTIONS_FILE", "questions.json")

# –æ—á–∫–∏ –∑–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç—å
POINTS = {"easy": 5, "medium": 10, "hard": 15}
# —Ä—É—Å—Å–∫–∏–µ –ø–æ–¥–ø–∏—Å–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–µ–π
RUS_DIFF = {"easy": "–õ—ë–≥–∫–∏–π", "medium": "–°—Ä–µ–¥–Ω–∏–π", "hard": "–°–ª–æ–∂–Ω—ã–π"}

# 10 –∫–∞—Ç–µ–≥–æ—Ä–∏–π ‚Äî –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏ –ø–æ 5
CATEGORIES: List[Tuple[str, str]] = [
    ("–ò—Å—Ç–æ—Ä–∏—è üìú", "–ò—Å—Ç–æ—Ä–∏—è"),
    ("–ì–µ–æ–≥—Ä–∞—Ñ–∏—è üåç", "–ì–µ–æ–≥—Ä–∞—Ñ–∏—è"),
    ("–ê—Å—Ç—Ä–æ–Ω–æ–º–∏—è üåå", "–ê—Å—Ç—Ä–æ–Ω–æ–º–∏—è"),
    ("–ë–∏–æ–ª–æ–≥–∏—è üß¨", "–ë–∏–æ–ª–æ–≥–∏—è"),
    ("–ö–∏–Ω–æ üé¨", "–ö–∏–Ω–æ"),
    ("–ú—É–∑—ã–∫–∞ üéµ", "–ú—É–∑—ã–∫–∞"),
    ("–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞ üìö", "–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞"),
    ("–ù–∞—É–∫–∞ üî¨", "–ù–∞—É–∫–∞"),
    ("–ò—Å–∫—É—Å—Å—Ç–≤–æ üé®", "–ò—Å–∫—É—Å—Å—Ç–≤–æ"),
    ("–¢–µ—Ö–Ω–∏–∫–∞ ‚öôÔ∏è", "–¢–µ—Ö–Ω–∏–∫–∞"),
]

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø—É–ª –ë–î
db_pool: Optional[asyncpg.pool.Pool] = None

# ===================== –ú–û–î–ï–õ–¨ –í–û–ü–†–û–°–û–í =====================
class Question:
    def __init__(self, category: str, difficulty: str, question: str, options: List[str], answer: str):
        self.category = category
        self.difficulty = difficulty
        self.question = question
        self.options = options
        self.answer = answer
        # –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π id (–¥–ª—è –∞–Ω—Ç–∏-–ø–æ–≤—Ç–æ—Ä–æ–≤)
        h = hashlib.sha256(
            f"{category}|{difficulty}|{question}|{answer}".encode("utf-8")
        ).hexdigest()
        self.qid = h

def load_questions(path: str) -> List[Question]:
    with open(path, "r", encoding="utf-8") as f:
        raw = json.load(f)
    qs: List[Question] = []
    for item in raw.get("questions", []):
        cat = item.get("category", "").strip()
        diff = item.get("difficulty", "").strip().lower()  # "easy"/"medium"/"hard"
        qtext = item.get("question", "").strip()
        options = list(item.get("options", []))
        answer = item.get("answer", "").strip()
        if not (cat and diff in ("easy", "medium", "hard") and qtext and options and answer):
            continue
        if answer not in options:
            # –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –≤ json –æ–ø–µ—á–∞—Ç–∫–∞ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            continue
        qs.append(Question(cat, diff, qtext, options, answer))
    log.info("–ó–∞–≥—Ä—É–∂–µ–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤: %s", len(qs))
    return qs

QUESTIONS: List[Question] = load_questions(QUESTIONS_FILE)

# –ë—ã—Å—Ç—Ä—ã–µ –∏–Ω–¥–µ–∫—Å—ã: (cat, diff) -> —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤
QUEST_IDX: Dict[Tuple[str, str], List[Question]] = {}
for q in QUESTIONS:
    QUEST_IDX.setdefault((q.category, q.difficulty), []).append(q)

# ===================== –ë–î =====================
CREATE_SQL = """
CREATE TABLE IF NOT EXISTS users (
  user_id BIGINT PRIMARY KEY,
  score INTEGER NOT NULL DEFAULT 0,
  combo INTEGER NOT NULL DEFAULT 0,
  total_correct INTEGER NOT NULL DEFAULT 0,
  total_wrong INTEGER NOT NULL DEFAULT 0
);

CREATE TABLE IF NOT EXISTS used_questions (
  user_id BIGINT NOT NULL,
  qid TEXT NOT NULL,
  PRIMARY KEY (user_id, qid)
);
"""

async def init_db():
    global db_pool
    if not DATABASE_URL:
        log.warning("DATABASE_URL –Ω–µ –∑–∞–¥–∞–Ω ‚Äî –ë–û–¢ –ù–ï –°–ú–û–ñ–ï–¢ –°–û–•–†–ê–ù–Ø–¢–¨ –ü–†–û–ì–†–ï–°–°!")
        return
    db_pool = await asyncpg.create_pool(DATABASE_URL, min_size=1, max_size=5)
    async with db_pool.acquire() as conn:
        for stmt in CREATE_SQL.strip().split(";"):
            s = stmt.strip()
            if s:
                await conn.execute(s + ";")
    log.info("–ë–∞–∑–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

async def ensure_user(user_id: int):
    if not db_pool:
        return
    async with db_pool.acquire() as conn:
        rec = await conn.fetchrow("SELECT user_id FROM users WHERE user_id=$1", user_id)
        if not rec:
            await conn.execute("INSERT INTO users(user_id) VALUES($1)", user_id)

async def db_get_score(user_id: int) -> int:
    if not db_pool:
        return 0
    async with db_pool.acquire() as conn:
        row = await conn.fetchrow("SELECT score FROM users WHERE user_id=$1", user_id)
        return int(row["score"]) if row else 0

async def db_get_progress(user_id: int) -> Tuple[int, int, int, int]:
    """score, combo, total_correct, total_wrong"""
    if not db_pool:
        return 0, 0, 0, 0
    async with db_pool.acquire() as conn:
        row = await conn.fetchrow(
            "SELECT score, combo, total_correct, total_wrong FROM users WHERE user_id=$1",
            user_id,
        )
        if not row:
            return 0, 0, 0, 0
        return int(row["score"]), int(row["combo"]), int(row["total_correct"]), int(row["total_wrong"])

async def db_add_points(user_id: int, delta: int):
    if not db_pool:
        return
    async with db_pool.acquire() as conn:
        await conn.execute("UPDATE users SET score = score + $1 WHERE user_id=$2", delta, user_id)

async def db_set_combo(user_id: int, value: int):
    if not db_pool:
        return
    async with db_pool.acquire() as conn:
        await conn.execute("UPDATE users SET combo=$1 WHERE user_id=$2", value, user_id)

async def db_inc_correct(user_id: int):
    if not db_pool:
        return
    async with db_pool.acquire() as conn:
        await conn.execute("UPDATE users SET total_correct = total_correct + 1 WHERE user_id=$1", user_id)

async def db_inc_wrong(user_id: int):
    if not db_pool:
        return
    async with db_pool.acquire() as conn:
        await conn.execute("UPDATE users SET total_wrong = total_wrong + 1 WHERE user_id=$1", user_id)

async def db_mark_used(user_id: int, qid: str):
    if not db_pool:
        return
    async with db_pool.acquire() as conn:
        await conn.execute(
            "INSERT INTO used_questions(user_id, qid) VALUES($1, $2) ON CONFLICT DO NOTHING",
            user_id, qid
        )

async def db_is_used(user_id: int, qid: str) -> bool:
    if not db_pool:
        return False
    async with db_pool.acquire() as conn:
        row = await conn.fetchrow(
            "SELECT 1 FROM used_questions WHERE user_id=$1 AND qid=$2",
            user_id, qid
        )
        return bool(row)

# ===================== –£–¢–ò–õ–ò–¢–´ UI =====================
def chunk_buttons(buttons: List[InlineKeyboardButton], per_row: int) -> List[List[InlineKeyboardButton]]:
    return [buttons[i:i+per_row] for i in range(0, len(buttons), per_row)]

def main_menu_kb(score: int) -> InlineKeyboardMarkup:
    # –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏ –ø–æ 5
    cat_buttons = [InlineKeyboardButton(title, callback_data=f"cat|{cat}")
                   for title, cat in CATEGORIES]
    rows = chunk_buttons(cat_buttons, 2)
    # –Ω–∏–∂–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
    rows.append([
        InlineKeyboardButton("üìä –ü—Ä–æ–≥—Ä–µ—Å—Å", callback_data="progress"),
        InlineKeyboardButton("‚ùì –ü—Ä–∞–≤–∏–ª–∞", callback_data="rules"),
    ])
    return InlineKeyboardMarkup(rows)

def diff_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("–õ—ë–≥–∫–∏–π", callback_data="diff|easy"),
            InlineKeyboardButton("–°—Ä–µ–¥–Ω–∏–π", callback_data="diff|medium"),
            InlineKeyboardButton("–°–ª–æ–∂–Ω—ã–π", callback_data="diff|hard"),
        ],
        [InlineKeyboardButton("‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="menu")]
    ])

def playing_kb(options: List[str], disabled: Optional[List[int]]=None) -> InlineKeyboardMarkup:
    rows: List[List[InlineKeyboardButton]] = []
    disabled = disabled or []
    for idx, text in enumerate(options):
        if idx in disabled:
            rows.append([InlineKeyboardButton(f"üö´ {text}", callback_data="noop")])
        else:
            rows.append([InlineKeyboardButton(text, callback_data=f"ans|{idx}")])
    # –Ω–∏–∂–Ω–∏–π —Ä—è–¥
    rows.append([
        InlineKeyboardButton("üß† –ü–æ–¥—Å–∫–∞–∑–∫–∞ (-10)", callback_data="hint"),
        InlineKeyboardButton("‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="menu"),
    ])
    return InlineKeyboardMarkup(rows)

# ===================== –°–û–°–¢–û–Ø–ù–ò–ï –ò–ì–†–û–ö–ê (–≤ –ø–∞–º—è—Ç–∏) =====================
# user_data –ø–æ–ª—è:
#   "cat": –≤—ã–±—Ä–∞–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è (—Ä—É—Å)
#   "diff": "easy"/"medium"/"hard"
#   "current": dict(
#       qid, question, options (shuffled), correct_idx, hinted(bool), disabled_idx [..],
#       msg_id (—Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º), chat_id, timer_task(asyncio.Task), expires_at
#   )

def reset_current(context: ContextTypes.DEFAULT_TYPE):
    if "current" in context.user_data:
        cur = context.user_data["current"]
        task: Optional[asyncio.Task] = cur.get("timer_task")
        if task and not task.done():
            task.cancel()
    context.user_data.pop("current", None)

# ===================== –õ–û–ì–ò–ö–ê =====================
async def send_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—á—ë—Ç –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
    user_id = update.effective_user.id
    await ensure_user(user_id)
    score, combo, tc, tw = await db_get_progress(user_id)
    text = (
        f"üè† *–í–∏–∫—Ç–æ—Ä–∏–Ω–∞*\n\n"
        f"–í–∞—à —Å—á—ë—Ç: *{score}* –±–∞–ª–ª–æ–≤\n"
        f"–ö–æ–º–±–æ: *{combo}*\n"
        f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö: *{tc}*, –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö: *{tw}*\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:"
    )
    kb = main_menu_kb(score)
    if update.callback_query:
        await update.callback_query.edit_message_text(
            text, reply_markup=kb, parse_mode="Markdown"
        )
    else:
        await update.message.reply_text(
            text, reply_markup=kb, parse_mode="Markdown"
        )
    # –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –º–µ–Ω—é ‚Äî —É–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∞–π–º–µ—Ä
    reset_current(context)

async def start_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_menu(update, context)

async def score_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    await ensure_user(user_id)
    score, combo, tc, tw = await db_get_progress(user_id)
    await update.message.reply_text(
        f"üìä –í–∞—à —Å—á—ë—Ç: {score}\n–ö–æ–º–±–æ: {combo}\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö: {tc}, –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö: {tw}"
    )

async def rules_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    text = (
        "üìú *–ü—Ä–∞–≤–∏–ª–∞*\n\n"
        "‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ —Å–ª–æ–∂–Ω–æ—Å—Ç—å (–õ—ë–≥–∫–∏–π/–°—Ä–µ–¥–Ω–∏–π/–°–ª–æ–∂–Ω—ã–π).\n"
        "‚Ä¢ –ù–∞ –æ—Ç–≤–µ—Ç ‚Äî 30 —Å–µ–∫—É–Ω–¥. –û–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á—ë—Ç –∏–¥—ë—Ç –≤ —Ç–æ–º –∂–µ —Å–æ–æ–±—â–µ–Ω–∏–∏.\n"
        "‚Ä¢ –ë–∞–ª–ª—ã: 5 / 10 / 15 –∑–∞ –ª—ë–≥–∫–∏–π/—Å—Ä–µ–¥–Ω–∏–π/—Å–ª–æ–∂–Ω—ã–π.\n"
        "‚Ä¢ –ü–æ–¥—Å–∫–∞–∑–∫–∞ —Å–∫—Ä—ã–≤–∞–µ—Ç 2 –Ω–µ–≤–µ—Ä–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–∞ –∏ –æ—Ç–Ω–∏–º–∞–µ—Ç 10 –±–∞–ª–ª–æ–≤ (1 —Ä–∞–∑ –Ω–∞ –≤–æ–ø—Ä–æ—Å).\n"
        "‚Ä¢ –ö–æ–º–±–æ: –∫–∞–∂–¥—ã–µ 3 –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ø–æ–¥—Ä—è–¥ –¥–∞—é—Ç +5 –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –±–∞–ª–ª–æ–≤.\n"
        "‚Ä¢ –í–æ–ø—Ä–æ—Å—ã –Ω–µ –ø–æ–≤—Ç–æ—Ä—è—é—Ç—Å—è.\n"
        "‚Ä¢ –ö–Ω–æ–ø–∫–∞ ¬´–í –º–µ–Ω—é¬ª ‚Äî –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç."
    )
    await q.edit_message_text(text, parse_mode="Markdown", reply_markup=InlineKeyboardMarkup([
        [InlineKeyboardButton("‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="menu")]
    ]))

async def progress_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_menu(update, context)

async def menu_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    await send_menu(update, context)

async def category_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    _, cat = q.data.split("|", 1)
    context.user_data["cat"] = cat
    context.user_data.pop("diff", None)
    reset_current(context)
    await q.edit_message_text(
        text=f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: *{cat}*\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–∂–Ω–æ—Å—Ç—å:",
        parse_mode="Markdown",
        reply_markup=diff_kb()
    )

async def difficulty_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    _, diff = q.data.split("|", 1)
    context.user_data["diff"] = diff
    # —Å—Ä–∞–∑—É –∑–∞–¥–∞—ë–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
    await ask_new_question(update, context)

def build_question_text(cur: dict) -> str:
    remain = max(0, int(cur["expires_at"] - asyncio.get_event_loop().time()))
    timer = f"‚è≥ {remain:02d}s"
    return f"*{timer}*\n\n{cur['question']}"

async def ask_new_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–±—Ä–∞—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å (—Ç–æ–π –∂–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏/—Å–ª–æ–∂–Ω–æ—Å—Ç–∏) –∏ –ø–æ–∫–∞–∑–∞—Ç—å."""
    qobj = update.callback_query
    user_id = update.effective_user.id
    cat = context.user_data.get("cat")
    diff = context.user_data.get("diff")

    if not cat or not diff:
        # —á–µ–≥–æ-—Ç–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ ‚Äî –≤ –º–µ–Ω—é
        await send_menu(update, context)
        return

    await ensure_user(user_id)

    pool = QUEST_IDX.get((cat, diff), [])
    # –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ
    available = []
    for q in pool:
        used = await db_is_used(user_id, q.qid)
        if not used:
            available.append(q)

    if not available:
        msg = (
            f"‚ùó –í–æ–ø—Ä–æ—Å—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ *{cat}*, —Å–ª–æ–∂–Ω–æ—Å—Ç—å *{RUS_DIFF[diff]}*.\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é."
        )
        kb = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("üü¢ –õ—ë–≥–∫–∏–π", callback_data="diff|easy"),
                InlineKeyboardButton("üü† –°—Ä–µ–¥–Ω–∏–π", callback_data="diff|medium"),
                InlineKeyboardButton("üî¥ –°–ª–æ–∂–Ω—ã–π", callback_data="diff|hard"),
            ],
            [InlineKeyboardButton("‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="menu")]
        ])
        if qobj:
            await qobj.edit_message_text(msg, parse_mode="Markdown", reply_markup=kb)
        else:
            await update.message.reply_text(msg, parse_mode="Markdown", reply_markup=kb)
        reset_current(context)
        return

    q = random.choice(available)

    # –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã: –æ–¥–∏–Ω —Ä–∞–∑ –ø–µ—Ä–µ–º–µ—à–∞—Ç—å –∏ –∑–∞–ø–æ–º–Ω–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫
    options = list(q.options)
    random.shuffle(options)
    correct_idx = options.index(q.answer)

    # –µ—Å–ª–∏ —É–∂–µ –≤–∏—Å–µ–ª —Ç–∞–π–º–µ—Ä ‚Äî –æ—Ç–º–µ–Ω–∏–º
    reset_current(context)

    # –æ—Ç–ø—Ä–∞–≤–∏—Ç—å (–∏–ª–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å) —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º
    text = build_question_text({
        "question": q.question,
        "expires_at": asyncio.get_event_loop().time() + 30
    })
    reply_markup = playing_kb(options)

    if qobj:
        msg: Message = await qobj.edit_message_text(
            text=text, parse_mode="Markdown", reply_markup=reply_markup
        )
    else:
        msg: Message = await update.message.reply_text(
            text=text, parse_mode="Markdown", reply_markup=reply_markup
        )

    # —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    now = asyncio.get_event_loop().time()
    cur = {
        "qid": q.qid,
        "question": q.question,
        "options": options,
        "correct_idx": correct_idx,
        "hinted": False,
        "disabled_idx": [],
        "msg_id": msg.message_id,
        "chat_id": msg.chat_id,
        "expires_at": now + 30,
        "cat": cat,
        "diff": diff,
    }
    context.user_data["current"] = cur

    # —Å—Ç–∞—Ä—Ç–æ–≤–∞—Ç—å —Ç–∞–π–º–µ—Ä (–æ–±–Ω–æ–≤–ª—è–µ—Ç –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ –º–µ—Å—Å–µ–¥–∂ –±–µ–∑ —Å–ø–∞–º–∞)
    task = asyncio.create_task(timer_task(context.application, context, cur))
    cur["timer_task"] = task

async def timer_task(app: Application, context: ContextTypes.DEFAULT_TYPE, cur: dict):
    """–û–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á—ë—Ç –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏. –ü–æ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ ‚Äî —Ñ–∏–∫—Å–∏—Ä—É–µ–º –Ω–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π."""
    try:
        while True:
            remain = int(cur["expires_at"] - asyncio.get_event_loop().time())
            if remain <= 0:
                # –≤—Ä–µ–º—è –≤—ã—à–ª–æ
                await on_time_out(app, context, cur)
                return
            # –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ (–Ω–µ —Ç—Ä–æ–≥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É)
            try:
                await app.bot.edit_message_text(
                    chat_id=cur["chat_id"],
                    message_id=cur["msg_id"],
                    text=build_question_text(cur),
                    parse_mode="Markdown",
                    reply_markup=playing_kb(cur["options"], cur.get("disabled_idx", []))
                )
            except Exception:
                # –µ—Å–ª–∏ –≤–¥—Ä—É–≥ ¬´Message is not modified¬ª –∏–ª–∏ –≥–æ–Ω–∫–∏ ‚Äî –º–æ–ª—á–∞ –ø—Ä–æ–ø—É—Å—Ç–∏–º
                pass
            await asyncio.sleep(1)
    except asyncio.CancelledError:
        # —Ç–∞–π–º–µ—Ä –æ—Ç–º–µ–Ω—ë–Ω ‚Äî –Ω–æ—Ä–º–∞–ª—å–Ω–æ
        return

async def on_time_out(app: Application, context: ContextTypes.DEFAULT_TYPE, cur: dict):
    """–ö–æ–≥–¥–∞ –≤—Ä–µ–º—è –∏—Å—Ç–µ–∫–∞–µ—Ç: —à—Ç—Ä–∞—Ñ–∞ –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ –∑–∞—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏ –∏–¥—ë–º –¥–∞–ª—å—à–µ."""
    user_id = context.user_data.get("user_id_cache")
    if not user_id and context._user_id:
        user_id = context._user_id
    if user_id:
        await db_inc_wrong(user_id)
        await db_set_combo(user_id, 0)

    # –ø–æ–∫–∞–∑–∞—Ç—å ¬´–≤—Ä–µ–º—è –≤—ã—à–ª–æ¬ª
    text = f"*‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ!*\n\n{cur['question']}"
    try:
        await context.bot.edit_message_text(
            chat_id=cur["chat_id"],
            message_id=cur["msg_id"],
            text=text,
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å", callback_data="next")],
                [InlineKeyboardButton("‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="menu")]
            ])
        )
    except Exception:
        pass

    # —É–±–∏—Ä–∞–µ–º —Ç–µ–∫—É—â–∏–π (—Ç–∞–π–º–µ—Ä —É–∂–µ —Å–∞–º –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è)
    context.user_data.pop("current", None)

async def answer_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()

    cur = context.user_data.get("current")
    if not cur:
        # —É–∂–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ ‚Äî –≤–µ—Ä–æ—è—Ç–Ω–æ, –≤—Ä–µ–º—è –≤—ã—à–ª–æ
        await q.answer("–í–æ–ø—Ä–æ—Å —É–∂–µ –∑–∞–∫—Ä—ã—Ç.", show_alert=False)
        return

    # –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä
    task: Optional[asyncio.Task] = cur.get("timer_task")
    if task and not task.done():
        task.cancel()

    # –∫–∞–∫–∞—è –∫–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞?
    _, idx_s = q.data.split("|", 1)
    try:
        idx = int(idx_s)
    except ValueError:
        return

    user_id = update.effective_user.id
    context.user_data["user_id_cache"] = user_id
    await ensure_user(user_id)

    correct = (idx == cur["correct_idx"])
    diff = cur["diff"]

    if correct:
        base = POINTS[diff]
        await db_add_points(user_id, base)
        await db_inc_correct(user_id)

        # –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç –∫–æ–º–±–æ
        score, combo, _, _ = await db_get_progress(user_id)
        combo += 1
        await db_set_combo(user_id, combo)

        combo_bonus = 0
        extra_note = ""
        if combo % 3 == 0:
            combo_bonus = 5
            await db_add_points(user_id, combo_bonus)
            extra_note = f" + –∫–æ–º–±–æ +{combo_bonus}"

        await db_mark_used(user_id, cur["qid"])
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º ¬´–ü—Ä–∞–≤–∏–ª—å–Ω–æ +X¬ª
        text = f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! +{base}{extra_note}\n\n{cur['question']}"
        await q.edit_message_text(
            text=text,
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å", callback_data="next")],
                [InlineKeyboardButton("‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="menu")]
            ])
        )

    else:
        await db_inc_wrong(user_id)
        await db_set_combo(user_id, 0)
        await db_mark_used(user_id, cur["qid"])
        # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ
        text = f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ.\n\n{cur['question']}"
        await q.edit_message_text(
            text=text,
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å", callback_data="next")],
                [InlineKeyboardButton("‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="menu")]
            ])
        )

    # –æ—á–∏—Å—Ç–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    context.user_data.pop("current", None)

async def next_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    # –ø—Ä–æ—Å—Ç–æ –∑–∞–¥–∞—ë–º —Å–ª–µ–¥—É—é—â–∏–π –≤ —Ç–æ–π –∂–µ –ø–∞—Ä–µ (–∫–∞—Ç–µ–≥–æ—Ä–∏—è/—Å–ª–æ–∂–Ω–æ—Å—Ç—å)
    await ask_new_question(update, context)

async def hint_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()

    cur = context.user_data.get("current")
    if not cur:
        await q.answer("–ü–æ–¥—Å–∫–∞–∑–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.", show_alert=False)
        return
    if cur["hinted"]:
        await q.answer("–ü–æ–¥—Å–∫–∞–∑–∫–∞ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞.", show_alert=False)
        return

    # –æ—Ç–º–µ—Ç–∏—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É
    cur["hinted"] = True

    # —Å–Ω—è—Ç—å 10 –±–∞–ª–ª–æ–≤
    user_id = update.effective_user.id
    await ensure_user(user_id)
    await db_add_points(user_id, -10)

    # –≤—ã–±—Ä–∞—Ç—å 2 –Ω–µ–≤–µ—Ä–Ω—ã—Ö –∏ ¬´–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å¬ª –∏—Ö
    wrong_idx = [i for i in range(len(cur["options"])) if i != cur["correct_idx"]]
    to_disable = random.sample(wrong_idx, k=min(2, len(wrong_idx)))
    cur["disabled_idx"] = sorted(set(cur.get("disabled_idx", []) + to_disable))

    # –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∞—Ç—å —Ç–æ –∂–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–±–µ–∑ —Å–ø–∞–º–∞)
    remain = max(0, int(cur["expires_at"] - asyncio.get_event_loop().time()))
    text = build_question_text(cur)
    await q.edit_message_text(
        text=text,
        parse_mode="Markdown",
        reply_markup=playing_kb(cur["options"], cur["disabled_idx"])
    )

async def noop_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –Ω–∞–∂–∞—Ç–∏–µ –ø–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–µ ‚Äî –ø—Ä–æ—Å—Ç–æ –±—ã—Å—Ç—Ä—ã–π answer
    await update.callback_query.answer()

# ===================== –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –•–ï–ù–î–õ–ï–†–û–í =====================
def register_handlers(app: Application):
    app.add_handler(CommandHandler("start", start_cmd))
    app.add_handler(CommandHandler("score", score_cmd))

    app.add_handler(CallbackQueryHandler(menu_cb, pattern=r"^menu$"))
    app.add_handler(CallbackQueryHandler(progress_cb, pattern=r"^progress$"))
    app.add_handler(CallbackQueryHandler(rules_cb, pattern=r"^rules$"))

    app.add_handler(CallbackQueryHandler(category_cb, pattern=r"^cat\|"))
    app.add_handler(CallbackQueryHandler(difficulty_cb, pattern=r"^diff\|"))

    app.add_handler(CallbackQueryHandler(answer_cb, pattern=r"^ans\|"))
    app.add_handler(CallbackQueryHandler(hint_cb, pattern=r"^hint$"))
    app.add_handler(CallbackQueryHandler(noop_cb, pattern=r"^noop$"))
    app.add_handler(CallbackQueryHandler(next_cb, pattern=r"^next$"))

# ===================== –°–¢–ê–†–¢ =====================
async def startup(app: Application):
    await init_db()
    log.info("–ë–æ—Ç –≥–æ—Ç–æ–≤.")

def build_app() -> Application:
    if not BOT_TOKEN:
        raise RuntimeError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∞")
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    register_handlers(app)
    app.post_init = startup  # –≤—ã–∑–æ–≤ init_db() –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞
    return app

def main():
    app = build_app()
    # polling –Ω–∞ Render —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ
    app.run_polling(allowed_updates=["message", "callback_query"])

if __name__ == "__main__":
    main()

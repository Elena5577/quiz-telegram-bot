import os
import asyncio
import logging
import asyncpg
import random
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, ApplicationBuilder, CommandHandler, CallbackQueryHandler,
    ContextTypes
)

# ==========================
# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
# ==========================
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

DB_POOL = None

# ==========================
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
# ==========================
async def init_db():
    """–°–æ–∑–¥–∞—ë—Ç –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã."""
    global DB_POOL
    DB_POOL = await asyncpg.create_pool(dsn=os.getenv("DATABASE_URL"))

    async with DB_POOL.acquire() as conn:
        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        await conn.execute("""
        CREATE TABLE IF NOT EXISTS users (
            user_id BIGINT PRIMARY KEY,
            score INT DEFAULT 0,
            combo INT DEFAULT 0,
            correct INT DEFAULT 0,
            wrong INT DEFAULT 0,
            hints INT DEFAULT 5
        )
        """)
        # –¢–∞–±–ª–∏—Ü–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
        await conn.execute("""
        CREATE TABLE IF NOT EXISTS questions (
            id SERIAL PRIMARY KEY,
            category TEXT,
            difficulty TEXT,
            question TEXT,
            options TEXT[],
            answer TEXT
        )
        """)

async def ensure_user(user_id: int):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ë–î, –∏ —Å–æ–∑–¥–∞—ë—Ç –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏."""
    async with DB_POOL.acquire() as conn:
        user = await conn.fetchrow("SELECT * FROM users WHERE user_id=$1", user_id)
        if not user:
            await conn.execute(
                "INSERT INTO users (user_id, score, combo, correct, wrong, hints) VALUES ($1,0,0,0,0,5)",
                user_id
            )

# ==========================
# HUD (–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
# ==========================
async def get_hud(user_id: int):
    async with DB_POOL.acquire() as conn:
        user = await conn.fetchrow("SELECT * FROM users WHERE user_id=$1", user_id)
    return (f"üèÜ –°—á—ë—Ç: {user['score']}\n"
            f"üî• –ö–æ–º–±–æ: {user['combo']}\n"
            f"‚úÖ –í–µ—Ä–Ω—ã—Ö: {user['correct']} ‚ùå –û—à–∏–±–æ–∫: {user['wrong']}\n"
            f"üîë –ü–æ–¥—Å–∫–∞–∑–∫–∏: {user['hints']}")

# ==========================
# –ò–≥—Ä–æ–≤–æ–π –ø—Ä–æ—Ü–µ—Å—Å
# ==========================
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    await ensure_user(user_id)
    hud = await get_hud(user_id)

    keyboard = [
        [InlineKeyboardButton("üåç –ì–µ–æ–≥—Ä–∞—Ñ–∏—è", callback_data="cat:geo"),
         InlineKeyboardButton("üî¨ –ù–∞—É–∫–∞", callback_data="cat:science")],
        [InlineKeyboardButton("üìñ –ò—Å—Ç–æ—Ä–∏—è", callback_data="cat:history"),
         InlineKeyboardButton("üé¨ –ö–∏–Ω–æ", callback_data="cat:cinema")],
        [InlineKeyboardButton("‚öΩ –°–ø–æ—Ä—Ç", callback_data="cat:sport"),
         InlineKeyboardButton("üíª IT", callback_data="cat:it")],
        [InlineKeyboardButton("üé® –ò—Å–∫—É—Å—Å—Ç–≤–æ", callback_data="cat:art"),
         InlineKeyboardButton("üéµ –ú—É–∑—ã–∫–∞", callback_data="cat:music")],
        [InlineKeyboardButton("üìö –õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞", callback_data="cat:literature"),
         InlineKeyboardButton("‚ùì –†–∞–∑–Ω–æ–µ", callback_data="cat:other")],
    ]
    await update.message.reply_text(f"{hud}\n\n–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=InlineKeyboardMarkup(keyboard))

async def choose_category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    cat = query.data.split(":")[1]

    keyboard = [
        [InlineKeyboardButton("–õ–µ–≥–∫–∞—è (+5)", callback_data=f"diff:{cat}:easy")],
        [InlineKeyboardButton("–°—Ä–µ–¥–Ω—è—è (+10)", callback_data=f"diff:{cat}:medium")],
        [InlineKeyboardButton("–°–ª–æ–∂–Ω–∞—è (+15)", callback_data=f"diff:{cat}:hard")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu")]
    ]
    hud = await get_hud(query.from_user.id)
    await query.edit_message_text(f"{hud}\n\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è –≤—ã–±—Ä–∞–Ω–∞. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç—å:",
                                  reply_markup=InlineKeyboardMarkup(keyboard))

async def send_question(update: Update, context: ContextTypes.DEFAULT_TYPE, category, difficulty):
    user_id = update.effective_user.id
    async with DB_POOL.acquire() as conn:
        row = await conn.fetchrow(
            "SELECT * FROM questions WHERE category=$1 AND difficulty=$2 ORDER BY random() LIMIT 1",
            category, difficulty
        )
    if not row:
        hud = await get_hud(user_id)
        await update.callback_query.edit_message_text(f"{hud}\n\n–í–æ–ø—Ä–æ—Å—ã –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –í—ã–±–µ—Ä–∏ –¥—Ä—É–≥—É—é.")
        return

    options = row["options"]
    random.shuffle(options)

    buttons = [[InlineKeyboardButton(opt, callback_data=f"ans:{row['id']}:{opt}")]
               for opt in options]
    buttons.append([InlineKeyboardButton("–ü–æ–¥—Å–∫–∞–∑–∫–∞ üîë (-10)", callback_data=f"hint:{row['id']}")])

    hud = await get_hud(user_id)
    await update.callback_query.edit_message_text(
        f"{hud}\n\n‚ùì {row['question']}",
        reply_markup=InlineKeyboardMarkup(buttons)
    )

async def choose_difficulty(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    _, cat, diff = query.data.split(":")
    await send_question(update, context, cat, diff)

# ==========================
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
# ==========================
async def answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    _, qid, ans = query.data.split(":", 2)

    async with DB_POOL.acquire() as conn:
        q = await conn.fetchrow("SELECT * FROM questions WHERE id=$1", int(qid))
        user = await conn.fetchrow("SELECT * FROM users WHERE user_id=$1", user_id)

        if ans == q["answer"]:
            points = {"easy": 5, "medium": 10, "hard": 15}[q["difficulty"]]
            new_score = user["score"] + points
            new_combo = user["combo"] + 1
            new_correct = user["correct"] + 1
            new_hints = user["hints"]

            if new_combo % 3 == 0:
                new_hints += 1  # –±–æ–Ω—É—Å –ø–æ–¥—Å–∫–∞–∑–∫–∞ –∑–∞ –∫–æ–º–±–æ

            await conn.execute("""UPDATE users SET score=$1, combo=$2, correct=$3, hints=$4 WHERE user_id=$5""",
                               new_score, new_combo, new_correct, new_hints, user_id)
            text = f"‚úÖ –í–µ—Ä–Ω–æ! +{points} –æ—á–∫–æ–≤."
        else:
            new_score = max(0, user["score"] - 5)
            await conn.execute("""UPDATE users SET score=$1, combo=0, wrong=wrong+1 WHERE user_id=$2""",
                               new_score, user_id)
            text = f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ! -5 –æ—á–∫–æ–≤."

    hud = await get_hud(user_id)
    await query.edit_message_text(f"{hud}\n\n{text}\n\n–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
                                  reply_markup=await main_menu())

# ==========================
# –ü–æ–¥—Å–∫–∞–∑–∫–∞
# ==========================
async def use_hint(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    _, qid = query.data.split(":")

    async with DB_POOL.acquire() as conn:
        user = await conn.fetchrow("SELECT * FROM users WHERE user_id=$1", user_id)
        q = await conn.fetchrow("SELECT * FROM questions WHERE id=$1", int(qid))

        if user["hints"] <= 0 or user["score"] < 10:
            hud = await get_hud(user_id)
            await query.edit_message_text(f"{hud}\n\n‚ùó –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–¥—Å–∫–∞–∑–æ–∫ –∏–ª–∏ –æ—á–∫–æ–≤.")
            return

        wrong_opts = [opt for opt in q["options"] if opt != q["answer"]]
        keep_wrong = random.sample(wrong_opts, 1)
        new_options = [q["answer"]] + keep_wrong
        random.shuffle(new_options)

        await conn.execute("UPDATE users SET hints=hints-1, score=score-10 WHERE user_id=$1", user_id)

    buttons = [[InlineKeyboardButton(opt, callback_data=f"ans:{q['id']}:{opt}")]
               for opt in new_options]

    hud = await get_hud(user_id)
    await query.edit_message_text(f"{hud}\n\n‚ùì {q['question']}",
                                  reply_markup=InlineKeyboardMarkup(buttons))

# ==========================
# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
# ==========================
async def main_menu():
    keyboard = [
        [InlineKeyboardButton("üåç –ì–µ–æ–≥—Ä–∞—Ñ–∏—è", callback_data="cat:geo"),
         InlineKeyboardButton("üî¨ –ù–∞—É–∫–∞", callback_data="cat:science")],
        [InlineKeyboardButton("üìñ –ò—Å—Ç–æ—Ä–∏—è", callback_data="cat:history"),
         InlineKeyboardButton("üé¨ –ö–∏–Ω–æ", callback_data="cat:cinema")],
        [InlineKeyboardButton("‚öΩ –°–ø–æ—Ä—Ç", callback_data="cat:sport"),
         InlineKeyboardButton("üíª IT", callback_data="cat:it")],
        [InlineKeyboardButton("üé® –ò—Å–∫—É—Å—Å—Ç–≤–æ", callback_data="cat:art"),
         InlineKeyboardButton("üéµ –ú—É–∑—ã–∫–∞", callback_data="cat:music")],
        [InlineKeyboardButton("üìö –õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞", callback_data="cat:literature"),
         InlineKeyboardButton("‚ùì –†–∞–∑–Ω–æ–µ", callback_data="cat:other")],
    ]
    return InlineKeyboardMarkup(keyboard)

# ==========================
# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
# ==========================
def register_handlers(app: Application):
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(choose_category, pattern="^cat:"))
    app.add_handler(CallbackQueryHandler(choose_difficulty, pattern="^diff:"))
    app.add_handler(CallbackQueryHandler(answer, pattern="^ans:"))
    app.add_handler(CallbackQueryHandler(use_hint, pattern="^hint:"))
    app.add_handler(CallbackQueryHandler(start, pattern="^menu$"))

def build_app(bot_token: str) -> Application:
    app = ApplicationBuilder().token(bot_token).build()
    register_handlers(app)
    return app

# ==========================
# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Å—Ç–∞—Ä—Ç –±–æ—Ç–∞ (–¥–ª—è Render)
# ==========================
async def async_main():
    bot_token = os.getenv("BOT_TOKEN")
    db_url = os.getenv("DATABASE_URL")

    print("=== DEBUG STARTUP ===")
    print("BOT_TOKEN:", (bot_token[:10] + "‚Ä¶") if bot_token else "‚ùå not found")
    print("DATABASE_URL:", (db_url[:30] + "‚Ä¶") if db_url else "‚ùå not found")
    print("=====================")

    if not bot_token:
        raise RuntimeError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
    await init_db()

    # –°–æ–∑–¥–∞—ë–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app = build_app(bot_token)

    # === –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Å—Ç–∞—Ä—Ç polling ===
    await app.initialize()   # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    await app.start()        # —Å—Ç–∞—Ä—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    print("Bot started‚Ä¶ polling now")

    try:
        # –¥–µ—Ä–∂–∏–º –ø—Ä–æ—Ü–µ—Å—Å –∂–∏–≤—ã–º, polling —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ñ–æ–Ω–µ
        while True:
            await asyncio.sleep(3600)
    finally:
        await app.stop()
        await app.shutdown()

if __name__ == "__main__":
    loop = asyncio.get_event_loop()           # –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π loop
    loop.run_until_complete(async_main())     # –∑–∞–ø—É—Å–∫–∞–µ–º async_main